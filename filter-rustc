#!/usr/bin/env python3
#
# Possible development workflow:
# TODO use filter-cargo, need to pass options
# * `cd` to the cargo workspace folder you are debugging, and run `ck check debug` (should print nothing).
# * Modify this script to eg `jqPrint(item)` the warning/error you are interested in.
# * Run `ck check` to see how your modifications changed the full filter output.

import json
import re
import subprocess
import sys

RE_ERROR_CODE = re.compile(r"E\d\d\d\d")
RE_ERROR_EXPLANATIONS = re.compile(r"Some errors have detailed explanations: (.*)\.")

# Print a Python object using `jq`.
# Uses a temporary file to avoid character escaping issues.
def jqPrint(j):
  import tempfile
  # TODO Should work with tempfile, but doesn't (only in some cases?).
  # with tempfile.NamedTemporaryFile(mode="w") as tempFile:
  with open("/tmp/filter-rustc", "w") as tempFile:
    s = json.dumps(j)
    tempFile.write(s)

  with open("/tmp/filter-rustc") as tempFile:
    content = tempFile.read()
    # -C: color
    out = subprocess.check_output(f"cat {tempFile.name} | jq -C .", shell=True).decode('utf-8').strip()
  print(out)

def readJson(filePath):
  with open(filePath) as f:
    return json.load(f)

# One nice reference: <https://stackoverflow.com/a/21786287>
def colorWarning(s):    return f"\x1b[33m{str(s)}\x1b[0m"
def colorSuggestion(s): return f"\x1b[32m{str(s)}\x1b[0m"
def colorError(s):      return f"\x1b[31m{str(s)}\x1b[0m"
def colorMeta(s):       return f"\x1b[37m{str(s)}\x1b[0m"

COLOR_CODE = 35

def colorBetweenBackticks(s):
  out = ""
  n = 0
  for c in s:
    if c == "`":
      if n % 2 == 0:
        out += f"\x1b[{COLOR_CODE}m"
      else:
        out += f"\x1b[0m"
      n += 1
    else:
      out += c
  if n % 2 == 0:
    return out
  return s

def replaceRendered(item, s, error=False):
  if error: item["rendered"] = colorError(s)
  else: item["rendered"] = colorWarning(s)

def getCodeLocations(item):
  locs = {}
  for i, span in enumerate(item["spans"]):
    name = span["file_name"]
    line = span["line_start"]
    if not name in locs: locs[name] = []
    if line in locs[name]: continue
    locs[name].append(line)

  s = ""
  i = 0
  for name, lines in locs.items():
    if i > 0: s += ", "
    i += 1
    s += name
    for j, line in enumerate(lines):
      if j > 0: s += " "
      s += f":{line}"
  return s

def render(item, locations, message, suggestions=""):
  multiline = len(locations) > 70 or len(message) + len(locations) > 120
  if suggestions: multiline = True
  if "\n" in message: multiline = True

  if item["level"] == "error": s = colorError(locations)
  else: s = colorWarning(locations)

  message = colorBetweenBackticks(message)
  if multiline: s += f":\n  {message}"
  else: s += f": {message}"

  if suggestions:
    suggestions = suggestions.replace("\n", "\n    ")
    s += f"\n  {suggestions}"
  if multiline: s += "\n"
  item["rendered"] = s

def compressTypes(s):
  s = s.replace("interner::_::_serde::Deserialize<'_>", "Deserialize")
  s = s.replace("interner::_::_serde::Serialize", "Serialize")
  s = s.replace("std::hash::Hash", "Hash")
  s = s.replace("std::fmt::Debug", "Debug")
  s = s.replace("std::fmt::Display", "Display")
  s = s.replace("std::result::Result", "Result")
  s = s.replace("std::cmp::", "")
  s = s.replace("std::marker::", "")
  s = s.replace("std::collections::", "")
  return s

# Generic compression that shows the plain "message" field.
def compress(item, suggestions=True, showNotes=False, showHelp=False):
  locations = getCodeLocations(item)

  s = "{}".format(item["message"])
  s = compressTypes(s)

  # These are the green outputs that show exactly what your code is missing. Very compact.
  suggestionStr = ""
  if suggestions:
    for child in item["children"]:
      for span in child["spans"]:
        if not "suggested_replacement" in span or span["suggested_replacement"] is None:
          continue
        x = span["suggested_replacement"].strip()
        if not x: continue
        if suggestionStr: suggestionStr += "\n"
        else: suggestionStr = "Did you mean:  "
        suggestionStr += f"{colorSuggestion(x)}"

  # This are more verbose hints from the compiler that begin with "note:" or "help:".
  # Some should be printed for less common/non-trivial errors.
  for extra in [ (showNotes, "note"), (showHelp, "help") ]:
    if not extra[0]: continue
    extraStr = ""
    for child in item["children"]:
      if child["level"] != extra[1]: continue
      if extraStr: extraStr += "\n"
      else: extraStr = f"{extra[1]}:  "
      extraStr += child["message"]
    if extraStr:
      if suggestionStr: suggestionStr += "\n"
      suggestionStr += extraStr

  suggestionStr = compressTypes(suggestionStr)
  render(item, locations, s, suggestionStr)

def filterMismatchedTypes(item):
  if len(item["spans"]) == 0: return
  if "label" not in item["spans"][0]: return
  s = item["spans"][0]["label"]
  if s .startswith("expected"):
    locations = getCodeLocations(item)
    render(item, locations, s)

def filterWrongNumberOfArguments(item):
  locations = getCodeLocations(item)
  s = ""
  found = False
  for span in item["spans"]:
    if span["label"] is not None:
      s += span["label"]
      found = True
  assert(found)
  s += ". Expected these arguments:"
  child = item["children"][0];
  for span in child["spans"]:
    if span["label"] is None: continue
    s += colorSuggestion("\n    " + span["text"][0]["text"].strip())
  render(item, locations, s)

def filterValueTypo(item):
  for child in item["children"]:
    for span in child["spans"]:
      if not "suggested_replacement" in span: continue
      item["message"] = colorWarning("Typo? -> {}".format(span["suggested_replacement"]))
      compress(item)

# Eg when you try use a container method but the contained type does not implement the necessary
# traits and you just need to stick to it some derive attributes to fix it.
def filterMissingDerives(item):
  s = item["message"]
  found = False

  for child in item["children"]:
    lead = "the following trait bounds were not satisfied"
    if child["message"].startswith(lead):
      s += child["message"].replace(lead, "").replace("\n", "\n  ")
      found = True
      break
    for span in child["spans"]:
      if not "suggested_replacement" in span: continue
      found = True
      s += ". Try adding these derives:\n  "
      s += colorSuggestion(span["suggested_replacement"].strip())
      if "text" in span and len(span["text"]) > 0 and "text" in span["text"][0]:
        s += "\n  {}".format(span["text"][0]["text"])

  # Missing trait bounds error cannot always be solved by derives, so this check
  # is bound to fail sometimes. Leaving this as a note to self.
  # Could instead just return without doing anything, then the original error is
  # shown without the "meta" failure message.
  if not found:
    raise Exception("Failed to match filterMissingDerives.")

  s += "\n"
  locations = getCodeLocations(item)
  render(item, locations, s)

def filter(args, item):
  m = item["message"]
  codeStr = None
  codeNum = None
  if "code" in item and isinstance(item["code"], dict):
    codeStr = item["code"]["code"]
    # Fails when the error code is a not numeric.
    try: codeNum = int(codeStr[1:])
    except: pass

  # Generic compression.
  for case in [
      { "code": 4, "subStrings": ["non-exhaustive patterns"], "suggestions": False },
      { "code": 27, "subStrings": ["pattern does not mention field"] },
      { "code": 46, "subStrings": ["not all trait items implemented"] },
      { "code": 53, "subStrings": ["incompatible type for trait"] },
      { "code": 61, "subStrings": ["this method takes"] },
      { "code": 63, "subStrings": ["missing field"] },
      { "code": 106, "subStrings": ["missing lifetime specifier"] },
      { "code": 107, "subStrings": ["missing generics for struct"] },
      { "code": 133, "subStrings": ["call to unsafe function"] },
      { "code": 261, "subStrings": ["use of undeclared lifetime"] },
      { "code": 267, "subStrings": ["`break` inside of a closure"] },
      { "code": 277, "subStrings": ["the trait bound", "is not satisfied"] },
      { "code": 277, "subStrings": ["doesn't implement"] },
      { "code": 277, "subStrings": ["can't compare"] },
      { "code": 277, "subStrings": ["cannot be indexed by"] },
      { "code": 277, "subStrings": ["is not an iterator"], "showNotes": True },
      {
        "code": 277,
        "subStrings": ["the size for values of type", "cannot be known at compilation time"],
        "showNotes": True,
      },
      { "code": 369, "subStrings": ["cannot add", "to"] },
      { "code": 373, "subStrings": ["closure may outlive the current function"] },
      { "code": 384, "subStrings": ["cannot assign twice to immutable variable"] },
      { "code": 405, "subStrings": ["cannot find trait"] },
      { "code": 412, "subStrings": ["cannot find type"] },
      { "code": 416, "subStrings": ["identifier", "is bound more than once in the same pattern"] },
      { "code": 422, "subStrings": ["cannot find struct, variant or union type"] },
      { "code": 425, "subStrings": ["cannot find function"] },
      { "code": 425, "subStrings": ["cannot find value"] },
      { "code": 432, "subStrings": ["unresolved import" ] },
      { "code": 433, "subStrings": ["failed to resolve: use of undeclared type" ] },
      { "code": 433, "subStrings": ["failed to resolve: could not find"] },
      { "code": 531, "subStrings": ["cannot find tuple struct or tuple variant"] },
      { "code": 593, "subStrings": ["closure is expected to take", "but it takes"] },
      { "code": 594, "subStrings": ["cannot assign", "is not declared as mutable"] },
      { "code": 599, "subStrings": ["no function or associated item named"], "showNotes": True },
      { "code": 603, "subStrings": ["module", "is private"] },
      { "code": 609, "subStrings": ["no field", "on type"] },
      { "code": 616, "subStrings": ["is private"] },
      { "code": 624, "subStrings": ["is private"] },
      { "code": 560, "subStrings": ["has no field named"] },
      { "code": 596, "subStrings": ["cannot borrow"] },
      { "code": 599, "subStrings": ["no variant or associated item named"] },
      { "code": 599, "subStrings": ["no method named"] },
      { "code": 700, "subStrings": ["captures lifetime that does not appear in bounds"], "showHelp": True },
      { "code": 758, "subStrings": ["unterminated block comment"] },
      { "code": "unused_variables" },
      { "code": "unused_imports" },
      { "code": "dead_code" },
      { "message": "unexpected closing delimiter" },
      { "message": "mismatched closing delimiter" },
      { "message": "this file contains an unclosed delimiter" },
      { "message": "cannot find macro" },
      { "message": "cannot find derive macro" },
      { "message": "no default declared" },
      { "message": "missing type for `const` item" },
      { "message": "missing `struct` for struct definition" },
      { "message": "unexpected end of macro invocation" },
      { "message": "unused `std::result::Result` that must be used" },
      { "message": "expected one of" },
      { "message": "cannot find attribute" },
      { "message": "expected identifier" },
      { "message": "No such file or directory" },
      { "message": "variable does not need to be mutable" },
  ]:
    if "code" in case:
      if isinstance(case["code"], int) and codeNum != case["code"]: continue
      if isinstance(case["code"], str) and codeStr != case["code"]: continue
    if "message" in case and case["message"] not in m: continue
    if "subStrings" in case and not all([s in m for s in case["subStrings"]]): continue
    suggestions = case["suggestions"] if "suggestions" in case else True
    showNotes = case["showNotes"] if "showNotes" in case else False
    showHelp = case["showHelp"] if "showHelp" in case else False
    compress(item, suggestions=suggestions, showNotes=showNotes, showHelp=showHelp)

  # Specialized compression functions.
  if codeNum == 61 and m.startswith("this function takes"):
    filterWrongNumberOfArguments(item)

  if codeNum == 308 and "mismatched types" in m:
    filterMismatchedTypes(item)

  if codeNum == 599 and "but its trait bounds were not satisfied" in m:
    filterMissingDerives(item)

  # Compress advice about errors into copy-paste ready commands.
  # The formatting is different depending on whether there is one or more errors.
  if m.startswith("For more information about an error"):
    return None

  if m.startswith("For more information about this error"):
    match = RE_ERROR_CODE.search(m)
    s = f"Help: rustc --explain {match.group(0)}"
    replaceRendered(item, s)

  if m.startswith("aborting due to"):
    item["rendered"] = item["rendered"].strip()

  match = RE_ERROR_EXPLANATIONS.match(m)
  if match:
    tokens = match.group(1).split(",")
    s = colorMeta("Help")
    s += ": "
    for i, token in enumerate(tokens):
      if i > 0: s += "; "
      s += f"rustc --explain {token.strip()}"
    item["rendered"] = s

  return item

def filterRustc(args):
  if args.disable:
    with args.input as f:
      return f.read()

  # Arrays of dicts representing JSON objects.
  data = []
  output = []

  # Maybe does not work yet. The intention is to allow printing of
  # eg `cargo test` output when there are no compiler errors.
  passthroughMode = False
  for line in args.input:
    if line.strip() == "": continue
    try:
      data.append(json.loads(line))
    except Exception as e:
      print("ENTERING PASSTHROUGH MODE")
      print(line)
      passthroughMode = True
      break

  if passthroughMode:
    for line in args.input:
      print(line)
    return

  for message in data:
    if message["reason"] != "compiler-message":
      output.append(message)
      continue

    item = message["message"]
    try:
      item = filter(args, item)
    except Exception as e:
      if args.debug:
        raise
      if item is not None:
        output.append({
          "reason": "compiler-message",
          "message": {
            "rendered": colorMeta("filter-rustc failed to process a message, showing the original:"),
          },
        })

    if item is None: continue

    duplicate = False
    for o in output:
      if "message" not in o: continue
      if item["rendered"] == o["message"]["rendered"]:
        duplicate = True
        break
    if duplicate: continue

    message["message"] = item
    output.append(message)

  if args.debug:
    pass
  else:
    # Output JSONL in the same format as the input was.
    for message in output:
      print(json.dumps(message, separators=(',', ':')))

if __name__ == "__main__":
  import argparse
  p = argparse.ArgumentParser(__doc__)
  p.add_argument(
      '--input',
      type=argparse.FileType('r'),
      default=sys.stdin,
      help="Path to input file or else use stdin.",
  )
  p.add_argument("--debug", action="store_true", help="Do not print rendered output and enable other debugging helpers")
  p.add_argument("--disable", action="store_true", help="Show the compiler output without any filtering")
  args = p.parse_args()
  filterRustc(args)
